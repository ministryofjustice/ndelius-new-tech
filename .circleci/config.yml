defaults: &defaults
  working_directory: ~/ndelius-new-tech
  docker:
    - image: circleci/openjdk:8-node-browsers
      
deploy_container_config: &deploy_container_config
  docker:
    - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
      environment:
        GITHUB_TEAM_NAME_SLUG: probation-services

install_aws_cli: &install_aws_cli
  run:
    name: Set up aws
    command: |
      sudo apt-get --assume-yes update
      sudo apt-get --assume-yes install python3-pip
      sudo pip3 install awscli

version: 2
general:
  branches:
jobs:
    build:
        <<: *defaults
        steps:
            - checkout
            - attach_workspace:
                at: ~/ndelius-new-tech
            - restore_cache:
                keys:
                  - v2-ndelius-new-tech-{{ checksum "build.sbt" }}
                  - v2-ndelius-new-tech-
            - run:
                name: yarn install
                command: |
                  yarn install --silent
            - run:
                name: Compile
                command: |
                  export _JAVA_OPTIONS="-Xms512m -Xmx1224m"
                  export SBT_OPTS="${SBT_OPTS} -Dsbt.jse.engineType=Node -Dsbt.jse.command=$(which nodejs)"
                  sbt compile < /dev/null
            - persist_to_workspace:
                  root: .
                  paths: .
    unitTests:
        <<: *defaults
        steps:
            - attach_workspace:
                at: ~/ndelius-new-tech
            - restore_cache:
                keys:
                  - v2-ndelius-new-tech-{{ checksum "build.sbt" }}
                  - v2-ndelius-new-tech-
            - run:
                name: Unit tests (Jest)
                command: |
                  yarn jest /app/assets/javascripts/app
            - run:
                name: Unit tests
                command: |
                  export _JAVA_OPTIONS="-Xms512m -Xmx1224m"
                  export SBT_OPTS="${SBT_OPTS} -Dsbt.jse.engineType=Node -Dsbt.jse.command=$(which nodejs)"
                  export CUCUMBER_OPTIONS="--tags @None"
                  sbt test < /dev/null
            - store_test_results:
                path: ./target/test-reports/
            - store_artifacts:
                path: ./target/test-reports/
                destination: reports
    bddOfffenderSummary:
        <<: *defaults
        steps:
            - attach_workspace:
                  at: ~/ndelius-new-tech
            - restore_cache:
                keys:
                  - v2-ndelius-new-tech-{{ checksum "build.sbt" }}
                  - v2-ndelius-new-tech-
            - run:
                name: BDD - Offender Summary
                command: |
                  export _JAVA_OPTIONS="-Xms512m -Xmx1224m"
                  export SBT_OPTS="${SBT_OPTS} -Dsbt.jse.engineType=Node -Dsbt.jse.command=$(which nodejs)"
                  export CUCUMBER_OPTIONS="--tags @OffenderSummary"
                  sbt "test-only bdd.RunCucumber" < /dev/null
            - store_test_results:
                path: ./target/test-reports/
            - store_artifacts:
                path: ./target/test-reports/
                destination: reports
    bddSFR:
        <<: *defaults
        steps:
            - attach_workspace:
                  at: ~/ndelius-new-tech
            - restore_cache:
                keys:
                  - v2-ndelius-new-tech-{{ checksum "build.sbt" }}
                  - v2-ndelius-new-tech-
            - run:
                name: BDD - SFR
                command: |
                  export _JAVA_OPTIONS="-Xms512m -Xmx1224m"
                  export SBT_OPTS="${SBT_OPTS} -Dsbt.jse.engineType=Node -Dsbt.jse.command=$(which nodejs)"
                  export CUCUMBER_OPTIONS="--tags @SFR"
                  sbt "test-only bdd.RunCucumber" < /dev/null
            - store_test_results:
                path: ./target/test-reports/
            - store_artifacts:
                path: ./target/test-reports/
                destination: reports
    bddParom1:
        <<: *defaults
        parallelism: 3
        steps:
            - attach_workspace:
                  at: ~/ndelius-new-tech
            - restore_cache:
                keys:
                  - v2-ndelius-new-tech-{{ checksum "build.sbt" }}
                  - v2-ndelius-new-tech-
            - run:
                name: BDD - Parom1
                command: |
                  export TESTFILES=$(circleci tests glob "features/**/paroleparom1report/*.feature" | circleci tests split --split-by=timings --timings-type=filename)
                  export _JAVA_OPTIONS="-Xms512m -Xmx1224m"
                  export SBT_OPTS="${SBT_OPTS} -Dsbt.jse.engineType=Node -Dsbt.jse.command=$(which nodejs)"
                  export CUCUMBER_OPTIONS="--tags @Parom1 $TESTFILES"
                  echo $CUCUMBER_OPTIONS
                  sbt "test-only bdd.RunCucumber" < /dev/null
            - store_test_results:
                path: ./target/test-reports/
            - store_artifacts:
                path: ./target/test-reports/
                destination: reports
    bddOther:
        <<: *defaults
        steps:
            - attach_workspace:
                  at: ~/ndelius-new-tech
            - restore_cache:
                keys:
                  - v2-ndelius-new-tech-{{ checksum "build.sbt" }}
                  - v2-ndelius-new-tech-
            - run:
                name: BDD - Others
                command: |
                  export _JAVA_OPTIONS="-Xms512m -Xmx1224m"
                  export SBT_OPTS="${SBT_OPTS} -Dsbt.jse.engineType=Node -Dsbt.jse.command=$(which nodejs)"
                  export CUCUMBER_OPTIONS="--tags ~@Parom1 --tags ~@OffenderSummary --tags ~@SFR"
                  sbt "test-only bdd.RunCucumber" < /dev/null
            - store_test_results:
                path: ./target/test-reports/
            - store_artifacts:
                path: ./target/test-reports/
                destination: reports
    artifacts:
        <<: *defaults
        steps:
            - attach_workspace:
                  at: ~/ndelius-new-tech
            - restore_cache:
                keys:
                  - v2-ndelius-new-tech-{{ checksum "build.sbt" }}
                  - v2-ndelius-new-tech-
            - run:
                name: Run sbt assembly
                command: |
                  export _JAVA_OPTIONS="-Xms512m -Xmx1224m"
                  export SBT_OPTS="${SBT_OPTS} -Dsbt.jse.engineType=Node -Dsbt.jse.command=$(which nodejs)"
                  sbt 'set test in assembly := {}' assembly < /dev/null
            - save_cache:
                key: v2-ndelius-new-tech-{{ checksum "build.sbt" }}
                paths:
                  - ~/.ivy2/cache
                  - ~/.sbt
            - run:
                name: Save Fat Jar
                command: |
                  mkdir -p ./target/artifacts
                  rm target/scala-2.12/ndelius2_*-web-assets.jar
                  mv target/scala-2.12/*.jar ./target/artifacts/
                  ls -1 ./target/artifacts/ndelius2-*.jar | sed 's/^.*ndelius2-\(.*\)\.jar.*$/\1/' > ./target/artifacts/version.txt
                  cp ./target/artifacts/ndelius2*.jar ./target/artifacts/ndelius2.jar
            - persist_to_workspace:
                root: ./target/artifacts/
                paths:
                  - ./ndelius2.jar
                  - ./version.txt
            - store_artifacts:
                path: target/artifacts
                destination: jars
    deploysmoketest:
        docker:
          - image: paulodiovani/aws-eb-cli
        working_directory: ~/ndelius-new-tech
        steps:
        - attach_workspace:
            at: /workspace
        - checkout
        - run:
            name: Deploy to Elastic Beanstalk Smoke Test environment
            command: |
                export PATH=$PATH:~/.local/bin/
                eb deploy delius-new-tech-2-secure --label $(cat /workspace/version.txt)
    smoketest:
        docker:
            - image: circleci/openjdk:8-node-browsers
        working_directory: ~/ndelius-new-tech
        steps:
        - run:
            name: Checkout smoke test
            command: |
                git clone https://github.com/noms-digital-studio/ndelius-new-tech-smoke-test.git .
                git checkout "$CIRCLE_BRANCH" || true
        - run:
            name: Build and run test
            command: |
                gradle test
    deploy:
        docker:
          - image: paulodiovani/aws-eb-cli
        working_directory: ~/ndelius-new-tech
        steps:
        - attach_workspace:
            at: /workspace
        - checkout
        - run:
            name: Deploy to Elastic Beanstalk
            command: |
                eb deploy --label $(cat /workspace/version.txt)
    push_to_ecs:
      <<: *defaults
      steps:
        - checkout
        - attach_workspace:
            at: ~/workspace
        - setup_remote_docker:
            docker_layer_caching: true
        - *install_aws_cli
        - run:
            name: debug
            command: |
              ls -ltr .
              ls -ltr workspace
        - run:
            name: publish image to ecs
            command: |
              aws configure --profile ecr set region eu-west-2
              aws configure --profile ecr set aws_access_key_id ${AWS_ECR_ACCESS_KEY}
              aws configure --profile ecr set aws_secret_access_key ${AWS_ECR_SECRET_KEY}
              login="$(aws ecr get-login --profile ecr --no-include-email)"
              ${login}
              docker build -t ${ECR_ENDPOINT}/probation-services/ndelius-new-tech-service:${CIRCLE_SHA1} .
              docker tag ${ECR_ENDPOINT}/probation-services/ndelius-new-tech-service:${CIRCLE_SHA1} ${ECR_ENDPOINT}/probation-services/ndelius-new-tech-service:latest
              docker push "${ECR_ENDPOINT}/probation-services/ndelius-new-tech-service:latest"
              docker push "${ECR_ENDPOINT}/probation-services/ndelius-new-tech-service:${CIRCLE_SHA1}"

    deploy_dev:
      <<: *deploy_container_config
      steps:
        - checkout
        - setup_remote_docker:
            docker_layer_caching: true
        - attach_workspace:
            at: ~/app
        - run:
            name: Kubectl deployment dev setup
            command: |
              aws configure --profile ecr set region eu-west-2
              aws configure --profile ecr set aws_access_key_id ${AWS_ECR_ACCESS_KEY}
              aws configure --profile ecr set aws_secret_access_key ${AWS_ECR_SECRET_KEY}
              login="$(aws ecr get-login --profile ecr --no-include-email)"
              setup-kube-auth
              kubectl config use-context dev
        - deploy:
            name: Deploy to dev
            command: |
              kubectl set image -f ./kube/deployment.yaml ndelius-new-tech-service=${ECR_ENDPOINT}/probation-services/ndelius-new-tech-service:${CIRCLE_SHA1} --local -o yaml \
              | kubectl apply -f -
              kubectl apply -f ./kube/service.yaml
              kubectl apply -f ./kube/ingress.yaml


workflows:
    version: 2
    build-deploy-test:
        jobs:
            - build
#            - bddOther:
#                requires:
#                    - build
#            - bddParom1:
#                requires:
#                    - build
#            - bddSFR:
#                requires:
#                    - build
#            - bddOfffenderSummary:
#                requires:
#                    - build
#            - unitTests:
#                requires:
#                    - build
            - artifacts:
                requires:
                  - build
#                    - bddOther
#                    - bddParom1
#                    - bddSFR
#                    - bddOfffenderSummary
#                    - unitTests
#            - deploysmoketest:
#                requires:
#                    - artifacts
#            - smoketest:
#                requires:
#                    - deploysmoketest
#            - deploy:
#                requires:
#                    - artifacts
#                filters:
#                    branches:
#                      only: master
            - push_to_ecs:
                requires:
                  - artifacts
                filters:
                  branches:
                    only: master
            - deploy_dev:
                requires:
                  - push_to_ecs
                      