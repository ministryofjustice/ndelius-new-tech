defaults: &defaults
  working_directory: ~/ndelius-new-tech
  docker:
    - image: cimg/openjdk:21.0-browsers

version: 2.1

orbs:
  mem: circleci/rememborb@0.0.1
  hmpps: ministryofjustice/hmpps@11

general:
  branches:
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/ndelius-new-tech
      - restore_cache:
          keys:
            - v2-ndelius-new-tech-{{ checksum "build.sbt" }}
            - v2-ndelius-new-tech-
      - run:
          name: npm install
          command: npm ci
      - run:
          name: Compile
          command: |
            export _JAVA_OPTIONS="-Xms512m -Xmx1224m"
            export SBT_OPTS="${SBT_OPTS} -Dsbt.jse.engineType=Node -Dsbt.jse.command=$(which nodejs)"
            sbt compile < /dev/null
      - persist_to_workspace:
          root: .
          paths: .
  unitTests:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/ndelius-new-tech
      - restore_cache:
          keys:
            - v2-ndelius-new-tech-{{ checksum "build.sbt" }}
            - v2-ndelius-new-tech-
      - run:
          name: Unit tests (Jest)
          command: npm test
      - run:
          name: Unit tests
          command: |
            export _JAVA_OPTIONS="-Xms512m -Xmx1224m"
            export SBT_OPTS="${SBT_OPTS} -Dsbt.jse.engineType=Node -Dsbt.jse.command=$(which nodejs)"
            export CUCUMBER_FILTER_TAGS="@None"
            sbt test < /dev/null
      - store_test_results:
          path: ./target/test-reports/
      - store_artifacts:
          path: ./target/test-reports/
          destination: reports
  bddSFR:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/ndelius-new-tech
      - restore_cache:
          keys:
            - v2-ndelius-new-tech-{{ checksum "build.sbt" }}
            - v2-ndelius-new-tech-
      - run:
          name: BDD - SFR
          command: |
            export _JAVA_OPTIONS="-Xms512m -Xmx1224m"
            export SBT_OPTS="${SBT_OPTS} -Dsbt.jse.engineType=Node -Dsbt.jse.command=$(which nodejs)"
            export CUCUMBER_FILTER_TAGS="@SFR"
            sbt "testOnly bdd.RunCucumber" < /dev/null
      - store_test_results:
          path: ./target/test-reports/
      - store_artifacts:
          path: ./target/test-reports/
          destination: reports
  bddOther:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/ndelius-new-tech
      - restore_cache:
          keys:
            - v2-ndelius-new-tech-{{ checksum "build.sbt" }}
            - v2-ndelius-new-tech-
      - run:
          name: BDD - Others
          command: |
            export _JAVA_OPTIONS="-Xms512m -Xmx1224m"
            export SBT_OPTS="${SBT_OPTS} -Dsbt.jse.engineType=Node -Dsbt.jse.command=$(which nodejs)"
            export CUCUMBER_FILTER_TAGS="not @SFR"
            sbt "testOnly bdd.RunCucumber" < /dev/null
      - store_test_results:
          path: ./target/test-reports/
      - store_artifacts:
          path: ./target/test-reports/
          destination: reports
  artifacts:
    <<: *defaults
    steps:
      - hmpps/create_app_version
      - attach_workspace:
          at: ~/ndelius-new-tech
      - restore_cache:
          keys:
            - v2-ndelius-new-tech-{{ checksum "build.sbt" }}
            - v2-ndelius-new-tech-
      - run:
          name: Run sbt assembly
          command: |
            export _JAVA_OPTIONS="-Xms512m -Xmx1224m"
            export APP_VERSION="${VERSION}"
            export SBT_OPTS="${SBT_OPTS} -Dsbt.jse.engineType=Node -Dsbt.jse.command=$(which nodejs)"
            sbt 'set test in assembly := {}' assembly < /dev/null
      - save_cache:
          key: v2-ndelius-new-tech-{{ checksum "build.sbt" }}
          paths:
            - ~/.ivy2/cache
            - ~/.sbt
      - run:
          name: Save Fat Jar
          command: |
            mkdir -p ./target/artifacts
            rm target/scala-2.13/ndelius2_*-web-assets.jar
            cp target/scala-2.13/*.jar ./target/artifacts/
            cp ./target/artifacts/ndelius2*.jar ./target/artifacts/ndelius2.jar
      - persist_to_workspace:
          root: ./target/artifacts/
          paths:
            - ./ndelius2.jar
      - store_artifacts:
          path: target/artifacts
          destination: jars
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Create IMAGE_NAME env var
          command: echo "export IMAGE_NAME=quay.io/hmpps/ndelius-new-tech" >> $BASH_ENV
      - mem/remember:
          env_var: IMAGE_NAME
          value: "${IMAGE_NAME}"
      - run:
          name: Build and push container image
          command: |
            docker build --pull \
              --rm=false . \
              --build-arg BUILD_NUMBER=$APP_VERSION \
              --build-arg GIT_REF=$CIRCLE_SHA1 \
              --build-arg GIT_BRANCH=$CIRCLE_BRANCH \
              --tag "${IMAGE_NAME}:${APP_VERSION}" \
              --label "app.version=${APP_VERSION}" \
              --label "build.version=${APP_VERSION}" \
              --label "build.number=${CIRCLE_BUILD_NUM}" \
              --label "build.url=${CIRCLE_BUILD_URL}" \
              --label "build.gitref=${CIRCLE_SHA1}"
            docker login -u="${QUAYIO_USERNAME}" -p="${QUAYIO_PASSWORD}" quay.io
            docker tag "${IMAGE_NAME}:${APP_VERSION}" "${IMAGE_NAME}:latest"
            docker push "${IMAGE_NAME}:${APP_VERSION}"
            docker push "${IMAGE_NAME}:latest"

workflows:
  version: 2
  build-deploy-test:
    jobs:
      - build
      - bddOther:
          requires:
            - build
      - bddSFR:
          requires:
            - build
      - unitTests:
          requires:
            - build
      - artifacts:
          requires:
            - build
            - bddOther
            - bddSFR
            - unitTests
      - hmpps/deploy_env:
          name: deploy_test
          env: "test"
          context: hmpps-common-vars
          filters:
            branches:
              only:
                - master
          requires:
            - artifacts
      - hmpps/deploy_env:
          name: deploy_preprod
          env: "preprod"
          context:
            - hmpps-common-vars
            - hmpps-delius-core-preprod
          filters:
            branches:
              only:
                - master
          requires:
            - artifacts
      - request-prod-approval:
          type: approval
          requires:
            - deploy_test
            - deploy_preprod
      - hmpps/deploy_env:
          name: deploy_prod
          env: "prod"
          slack_notification: true
          slack_channel_name: probation-integration-notifications
          context:
            - hmpps-common-vars
            - hmpps-delius-core-prod
          requires:
            - request-prod-approval
